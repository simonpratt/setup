alias whichport="lsof -i -P -n | grep LISTEN"

alias glr="git for-each-ref --sort=-committerdate --count=10 --format='%(refname:short)' refs/heads/"
alias gb="echo '=== Current Branch ==='; git branch | grep '*'"
alias gmm="git merge master"

alias nmon="npm run nodemon"
alias nst="npm start"
alias nci="npm ci"
alias k="kubectl"
alias k-all="kubectl api-resources --verbs=list --namespaced -o name | xargs -n 1 kubectl get --show-kind --ignore-not-found"

alias dirstat="du -h -d 1 | sort -rh"

alias dock="watch 'docker ps --format \"table {{ .ID }}\t{{.Names}}\t{{.Status}}\"'"

alias todo="code ~/dev/todo.tasks"

function certview () {
  nslookup $1
  openssl s_client -showcerts -servername $1 -connect $1:443 <<< "Q"
}

function certview-debug () {
  nslookup $1
  (openssl s_client -showcerts -servername $1 -connect $1:443 <<< "Q" | openssl x509 -text | grep -iA2 "Validity")
}

docker-log() {
  if command -v pino-pretty &> /dev/null; then
    docker logs --tail 1000 -f "$1" | pino-pretty
  else
    docker logs --tail 1000 -f "$1"
  fi
}

k-ns() {
  kubectl config set-context --current --namespace=$1
}

ack-ssm-env() {
  params=$(aws ssm get-parameters-by-path --with-decryption --recursive --path $1 | jq -r '.Parameters[] | (.Name + " " + .Value)' | sort -u)
  if [ -z "$2" ]
    then
      echo "filtering none"
      echo $params
  else
    echo "filtering $2"
    echo $params | ack $2
  fi
}

sha1check() {
    # Set the directory to check (default to current directory if no argument provided)
    if [ $# -eq 0 ]; then
        local DIR="."
    else
        local DIR="$1"
    fi

    # Check if directory exists
    if [ ! -d "$DIR" ]; then
        echo "Error: Directory '$DIR' does not exist."
        return 1
    fi

    echo "==================================================="
    echo "SHA-1 Checksums for files in: $(realpath "$DIR")"
    echo "==================================================="
    echo

    # Find all files (not directories) and calculate SHA-1 checksums
    find "$DIR" -type f -print0 | while IFS= read -r -d '' file; do
        # Calculate SHA-1 checksum
        checksum=$(shasum -a 1 "$file" 2>/dev/null)
        
        if [ $? -eq 0 ]; then
            # Extract just the hash part
            hash=$(echo "$checksum" | cut -d' ' -f1)
            # Get relative path for cleaner output
            rel_path=$(realpath --relative-to="$DIR" "$file" 2>/dev/null || echo "$file")
            
            # Format output nicely
            printf "%-40s  %s\n" "$hash" "$rel_path"
        else
            echo "Error calculating checksum for: $file"
        fi
    done | sort -k2  # Sort by filename

    echo
    echo "==================================================="
    echo "Checksum calculation complete."
}
